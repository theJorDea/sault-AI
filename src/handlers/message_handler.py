import re
import logging
import asyncio
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.utils.message_utils import send_message_with_retry, update_message_with_retry
from src.utils.keyboard_utils import get_main_keyboard, get_cancel_keyboard
from src.services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class BotState(StatesGroup):
    WAITING_FOR_PHOTO = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    WAITING_FOR_FILE = State()   # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

class MessageHandler:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.gemini_service = GeminiService()
        self._loading_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        self._loading_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏

    async def _animate_loading(self, message: types.Message, prefix: str = "ü§ñ AI: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å"):
        """
        –ê–Ω–∏–º–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –º–µ–Ω—è—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        dots = 0
        max_dots = 3
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
            initial_text = f"{prefix}{'.' * dots} ‚è≥"
            loading_message = await send_message_with_retry(message, initial_text)
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {loading_message.message_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –ø–æ–∑–∂–µ
            self._loading_messages[message.from_user.id] = loading_message
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            while True:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
                await asyncio.sleep(1.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å 0.7 –¥–æ 1.2 —Å–µ–∫—É–Ω–¥
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
                dots = (dots + 1) % (max_dots + 1)
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏
                emojis = ["‚è≥", "‚åõ", "‚è≥", "‚åõ"]
                emoji = emojis[dots % len(emojis)]
                loading_text = f"{prefix}{'.' * dots} {emoji}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    success = await update_message_with_retry(
                        loading_message, 
                        loading_text
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Ç–æ—á–µ–∫: {dots}, —É—Å–ø–µ—Ö: {success}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
                
        except asyncio.CancelledError:
            # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            return self._loading_messages.get(message.from_user.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return self._loading_messages.get(message.from_user.id)

    async def _start_loading_animation(self, message: types.Message, prefix: str = "ü§ñ AI: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å"):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            task: –ó–∞–¥–∞—á–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        """
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not hasattr(self, "_loading_messages"):
            self._loading_messages = {}
        
        user_id = message.from_user.id
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ
        if user_id in self._loading_tasks:
            try:
                self._loading_tasks[user_id].cancel()
                await asyncio.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
                logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏
        task = asyncio.create_task(self._animate_loading(message, prefix))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._loading_tasks[user_id] = task
        
        return task

    async def _stop_loading_animation(self, user_id: int):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if not hasattr(self, "_loading_messages"):
            self._loading_messages = {}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self._loading_tasks:
            task = self._loading_tasks[user_id]
            
            try:
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
                task.cancel()
                
                # –î–∞–µ–º –∑–∞–¥–∞—á–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–º–µ–Ω—É
                await asyncio.sleep(0.2)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π
                loading_message = self._loading_messages.get(user_id)
                
                if loading_message:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {loading_message.message_id}")
                else:
                    logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                del self._loading_tasks[user_id]
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                return loading_message
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                return self._loading_messages.get(user_id)
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return self._loading_messages.get(user_id)

    async def handle_message(self, message: types.Message, state: FSMContext = None):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        """
        user_id = message.from_user.id
        loading_message = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state:
                current_state = await state.get_state()
                if current_state:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
                    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                        await state.clear()
                        await send_message_with_retry(
                            message,
                            "ü§ñ AI: –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
                            reply_markup=get_main_keyboard()
                        )
                        return
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            if message.text == "üîç –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                await send_message_with_retry(
                    message,
                    "ü§ñ AI: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            elif message.text == "üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
                if state:
                    await state.set_state(BotState.WAITING_FOR_PHOTO)
                    await send_message_with_retry(
                        message,
                        "ü§ñ AI: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.",
                        reply_markup=get_cancel_keyboard()
                    )
                return
            
            elif message.text == "üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª":
                if state:
                    await state.set_state(BotState.WAITING_FOR_FILE)
                    await send_message_with_retry(
                        message,
                        "ü§ñ AI: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                        reply_markup=get_cancel_keyboard()
                    )
                return
            
            elif message.text == "‚ùì –ü–æ–º–æ—â—å":
                await send_message_with_retry(
                    message,
                    "ü§ñ AI: –Ø –º–æ–≥—É:\n"
                    "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                    "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n"
                    "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                    reply_markup=get_main_keyboard()
                )
                return
            
            elif message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                await send_message_with_retry(
                    message,
                    "ü§ñ AI: –û –±–æ—Ç–µ:\n"
                    "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ Google Gemini AI, –æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.\n"
                    "–í–µ—Ä—Å–∏—è: 1.0\n"
                    "Gemini Model: gemini-2.5-flash-preview-04-17",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            await self._start_loading_animation(message)
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –î–æ–±–∞–≤–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —É–≤–∏–¥–µ—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
            await asyncio.sleep(2.0)
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini
                response_text = await self.gemini_service.generate_response(message.text)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –î–æ–±–∞–≤–∏–º –µ—â–µ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                await asyncio.sleep(1.0)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                loading_message = await self._stop_loading_animation(user_id)
                
                if loading_message:
                    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    chunks = re.split(r'(?<=[.!?])\s+(?=[–ê-–ØA-Z])', response_text)
                    current_text = "ü§ñ AI: "
                    
                    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
                    for i, chunk in enumerate(chunks):
                        if chunk.strip():
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —á–∞—Å—Ç—å—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
                            if current_text != "ü§ñ AI: ":
                                current_text += " " + chunk
                            else:
                                current_text += chunk
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                            try:
                                await update_message_with_retry(loading_message, current_text)
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å {i+1}/{len(chunks)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                                await asyncio.sleep(0.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å 0.2 –¥–æ 0.5 —Å–µ–∫—É–Ω–¥
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                loading_message = await send_message_with_retry(message, current_text)
                    
                    # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    try:
                        await update_message_with_retry(
                            loading_message, 
                            current_text, 
                            reply_markup=get_main_keyboard()
                        )
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        await send_message_with_retry(
                            message, 
                            current_text, 
                            reply_markup=get_main_keyboard()
                        )
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await send_message_with_retry(
                        message, 
                        f"ü§ñ AI: {response_text}", 
                        reply_markup=get_main_keyboard()
                    )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if user_id in self._loading_tasks:
                    await self._stop_loading_animation(user_id)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                await send_message_with_retry(
                    message,
                    f"ü§ñ AI: –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_main_keyboard()
                )
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            if user_id in self._loading_tasks:
                await self._stop_loading_animation(user_id)
            
            await send_message_with_retry(
                message,
                f"ü§ñ AI: –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_keyboard()
            )
            
    async def handle_photo(self, message: types.Message, state: FSMContext = None):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        """
        user_id = message.from_user.id
        loading_message = None
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            await self._start_loading_animation(message, "ü§ñ AI: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
                photo = message.photo[-1]
                file = await message.bot.get_file(photo.file_id)
                file_content = await message.bot.download_file(file.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
                photo_data = file_content.read()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º {len(photo_data)} –±–∞–π—Ç")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                prompt = "–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ."
                if message.caption:
                    prompt = f"–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª: {message.caption}"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑")
                result = await self.gemini_service.analyze_image(photo_data, prompt=prompt)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                loading_message = await self._stop_loading_animation(user_id)
                
                if loading_message:
                    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    chunks = re.split(r'(?<=[.!?])\s+(?=[–ê-–ØA-Z])', result)
                    current_text = "ü§ñ AI: "
                    
                    for i, chunk in enumerate(chunks):
                        if chunk.strip():
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —á–∞—Å—Ç—å—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
                            if current_text != "ü§ñ AI: ":
                                current_text += " " + chunk
                            else:
                                current_text += chunk
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                            try:
                                await update_message_with_retry(loading_message, current_text)
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç—å {i+1}/{len(chunks)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                loading_message = await send_message_with_retry(message, current_text)
                            
                            # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            await asyncio.sleep(0.2)
                    
                    # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    try:
                        await update_message_with_retry(
                            loading_message, 
                            current_text, 
                            reply_markup=get_main_keyboard()
                        )
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        await send_message_with_retry(
                            message, 
                            current_text, 
                            reply_markup=get_main_keyboard()
                        )
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await send_message_with_retry(
                        message, 
                        f"ü§ñ AI: {result}", 
                        reply_markup=get_main_keyboard()
                    )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if user_id in self._loading_tasks:
                    await self._stop_loading_animation(user_id)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                await send_message_with_retry(
                    message,
                    f"ü§ñ AI: –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_main_keyboard()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state:
                await state.clear()
            
        except Exception as e:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            if user_id in self._loading_tasks:
                await self._stop_loading_animation(user_id)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            await send_message_with_retry(
                message,
                f"ü§ñ AI: –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_keyboard()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state:
                await state.clear()
                
    async def handle_document(self, message: types.Message, state: FSMContext = None):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/—Ñ–∞–π–ª–æ–≤
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        """
        user_id = message.from_user.id
        loading_message = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state:
                current_state = await state.get_state()
                if current_state != BotState.WAITING_FOR_FILE.state:
                    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–∞–π–ª–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await send_message_with_retry(
                        message,
                        "ü§ñ AI: –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à —Ñ–∞–π–ª. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞..."
                    )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_name = message.document.file_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ñ–∞–π–ª"
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            await self._start_loading_animation(message, "ü§ñ AI: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª")
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                file = await message.bot.get_file(message.document.file_id)
                file_content = await message.bot.download_file(file.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_data = file_content.read()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ —Ä–∞–∑–º–µ—Ä–æ–º {len(file_data)} –±–∞–π—Ç")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑")
                result = await self.gemini_service.analyze_file(file_data, file_name)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                loading_message = await self._stop_loading_animation(user_id)
                
                if loading_message:
                    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    chunks = re.split(r'(?<=[.!?])\s+(?=[–ê-–ØA-Z])', result)
                    current_text = "ü§ñ AI: "
                    
                    for i, chunk in enumerate(chunks):
                        if chunk.strip():
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —á–∞—Å—Ç—å—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
                            if current_text != "ü§ñ AI: ":
                                current_text += " " + chunk
                            else:
                                current_text += chunk
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                            try:
                                await update_message_with_retry(loading_message, current_text)
                                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞ —á–∞—Å—Ç—å {i+1}/{len(chunks)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞: {str(e)}")
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                loading_message = await send_message_with_retry(message, current_text)
                            
                            # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            await asyncio.sleep(0.2)
                    
                    # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    try:
                        await update_message_with_retry(
                            loading_message, 
                            current_text, 
                            reply_markup=get_main_keyboard()
                        )
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–∞: {str(e)}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        await send_message_with_retry(
                            message, 
                            current_text, 
                            reply_markup=get_main_keyboard()
                        )
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await send_message_with_retry(
                        message, 
                        f"ü§ñ AI: {result}", 
                        reply_markup=get_main_keyboard()
                    )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if user_id in self._loading_tasks:
                    await self._stop_loading_animation(user_id)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}")
                await send_message_with_retry(
                    message,
                    f"ü§ñ AI: –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_main_keyboard()
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state:
                await state.clear()
            
        except Exception as e:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            if user_id in self._loading_tasks:
                await self._stop_loading_animation(user_id)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            await send_message_with_retry(
                message,
                f"ü§ñ AI: –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞. –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_keyboard()
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if state:
                await state.clear() 